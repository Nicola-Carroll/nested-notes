# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@0.1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    docker:
      - image: 'cimg/ruby:3.0.2-node'
    executor: ruby/default
    steps:
      - checkout
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler
      # - run:
      #     name: Wait for DB
      #     command: dockerize -wait tcp://localhost:3000 -timeout 1m
      # - run:
      #     name: Database setup
      #     command: bundle exec rails db:schema:load --trace
      # - run:
      #     name: Run RSpec
      #     command: |
      #       bundle install
      #       bundle exec rspec
      #     environment:
      #       RAILS_ENV: test
      #       DB_HOST: postgres
      #       DB_NAME: nested_notes_test
  
  # test:
  # # this splits our tests across multiple containers.
  #   parallelism: 3
  #   docker:
  #     - image: circleci/ruby:2.6.3-stretch-node

  #   # environment variables specific to Ruby/Rails, applied to the primary container.
  #   environment: 
  #     RAILS_ENV: test
  #   # A series of steps to run, some are similar to those in "build".
  #   steps:
  #     - checkout
  #     # - node/install-packages:
  #     #     pkg-manager: yarn
  #     #     cache-key: "yarn.lock"
  #     # Here we make sure that the secondary container boots
  #     # up before we run operations on the database.
  #     # - run:
  #     #     name: Wait for DB
  #     #     command: dockerize -wait tcp://localhost:3000 -timeout 1m
  #     # - run:
  #     #     name: Database setup
  #     #     command: bundle exec rails db:schema:load --trace
  #     # Run rspec in parallel
  #     - run:
  #         name: Run RSpec
  #         command: |
  #           bundle exec rspec



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
